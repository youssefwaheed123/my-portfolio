/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 hacker-room-new.glb -T
Files: hacker-room-new.glb [34.62MB] > /Users/hsuwinlat/Desktop/jsm pj/threejscc-portfolio/public/models/hacker-room-new-transformed.glb [2.56MB] (93%)
*/

"use client";

import { useGSAP } from "@gsap/react";
import { useGLTF, useTexture } from "@react-three/drei";
import { GroupProps } from "@react-three/fiber";
import gsap from "gsap";
import { useRef } from "react";
import * as THREE from "three";

interface HackerRoomProps extends GroupProps {}

export function HackerRoom({ ...props }: HackerRoomProps) {
  const { nodes, materials } = useGLTF("/models/hacker-room.glb") as any;

  // Load textures
  const monitortxt = useTexture("/textures/desk/monitor.png");
  const screenTxt = useTexture("/textures/desk/screen.png");
  const targetRef = useRef(null);
  const getRandom = (min: number, max: number) =>
    Math.random() * (max - min) + min;
  useGSAP(() => {
    gsap.to((targetRef?.current as any)?.position as any, {
      x: getRandom(0, 3),
      y: getRandom(-0.5, 0),
      z: getRandom(-1, 1),
      duration: 2.5,
      repeat: -1,
      yoyo: true,
      ease: "power1.inOut",
    });
  });

  return (
    <group {...props} dispose={null} ref={targetRef}>
      {/* Screen */}
      <mesh
        geometry={nodes.screen_screens_0.geometry}
        material={materials.screens}
      >
        <meshStandardMaterial map={screenTxt} />
      </mesh>

      {/* Glass */}
      <mesh
        geometry={nodes.screen_glass_glass_0.geometry}
        material={materials.glass}
      />

      {/* Table */}
      <mesh
        geometry={nodes.table_table_mat_0_1.geometry}
        material={materials.table_mat}
      />

      {/* Computer */}
      <mesh geometry={nodes.table_table_mat_0_2.geometry}>
        <meshStandardMaterial map={monitortxt} />
      </mesh>

      {/* Server */}
      <mesh
        geometry={nodes.table_table_mat_0_3.geometry}
        material={materials.server_mat}
      />

      {/* VHS Player */}
      <mesh
        geometry={nodes.table_table_mat_0_4.geometry}
        material={materials.vhsPlayer_mat}
      />

      {/* Stand */}
      <mesh
        geometry={nodes.table_table_mat_0_5.geometry}
        material={materials.stand_mat}
      />

      {/* Mat */}
      <mesh
        geometry={nodes.table_table_mat_0_6.geometry}
        material={materials.mat_mat}
      />

      {/* Arm */}
      <mesh
        geometry={nodes.table_table_mat_0_7.geometry}
        material={materials.arm_mat}
      />

      {/* TV */}
      <mesh geometry={nodes.table_table_mat_0_8.geometry}>
        <meshStandardMaterial map={monitortxt} />
      </mesh>

      {/* Cables */}
      <mesh
        geometry={nodes.table_table_mat_0_9.geometry}
        material={materials.cables_mat}
      />

      {/* Props */}
      <mesh
        geometry={nodes.table_table_mat_0_10.geometry}
        material={materials.props_mat}
      />

      {/* Ground */}
      <mesh
        geometry={nodes.table_table_mat_0_11.geometry}
        material={materials.ground_mat}
      />

      {/* Key */}
      <mesh
        geometry={nodes.table_table_mat_0_12.geometry}
        material={materials.key_mat}
      />
    </group>
  );
}

// Preload the model for faster loading
useGLTF.preload("/models/hacker-room.glb");
